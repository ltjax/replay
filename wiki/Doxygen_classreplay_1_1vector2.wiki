
==replay::vector2 Reference==

{{{
#include vector2.hpp
}}}
2-dimensional vector. 
====data====
{{{
  type replay::vector2< type >::data[2][2]
}}}
  the actual data. 
====vector2====
{{{
  replay::vector2< type >::vector2()
}}}
  Default constructor. Initializes all components as zero. 
====vector2====
{{{
  replay::vector2< type >::vector2(const type x, const type y)
}}}
  Initialize vector from given values. 
====vector2====
{{{
  replay::vector2< type >::vector2(const type *values)
}}}
  Initialize vector from a c-style array. 
====vector2====
{{{
  replay::vector2< type >::vector2(const type value)
}}}
  Initialize vector by setting all elements to a single value. 
====clear====
{{{
  void replay::vector2< type >::clear()
}}}
  Vector clear. Sets all elements to 0. 
====negate====
{{{
  void replay::vector2< type >::negate()
}}}
  Vector negate. 
====operator!=====
{{{
  bool replay::vector2< type >::operator!=(const vector2< type > &operand) const 
}}}
  Vector element wise compare. 
====operator*====
{{{
  replay::vector2< type > replay::vector2< type >::operator*(const type value) const 
}}}
  Vector scalar multiplication. 
====operator*=====
{{{
  replay::vector2< type > & replay::vector2< type >::operator*=(const type value)
}}}
  Vector scalar multiplicate-assign. 
====operator+====
{{{
  replay::vector2< type > replay::vector2< type >::operator+(const vector2< type > &operand) const 
}}}
  Vector addition. 
====operator+=====
{{{
  replay::vector2< type > & replay::vector2< type >::operator+=(const vector2< type > &operand)
}}}
  Vector add-assign. 
====operator-====
{{{
  replay::vector2< type > replay::vector2< type >::operator-(const vector2< type > &operand) const 
}}}
  vector subtraction. 
====operator-====
{{{
  replay::vector2< type > replay::vector2< type >::operator-() const 
}}}
  Vector negation. 
====operator-=====
{{{
  replay::vector2< type > & replay::vector2< type >::operator-=(const vector2< type > &operand)
}}}
  Vector subtract-assign. 
====operator/====
{{{
  replay::vector2< type > replay::vector2< type >::operator/(const type value) const 
}}}
  Vector scalar division. 
====operator/=====
{{{
  replay::vector2< type > & replay::vector2< type >::operator/=(const type value)
}}}
  Vector scalar divide-assign. 
====operator=====
{{{
  replay::vector2< type > & replay::vector2< type >::operator=(const type *array)
}}}
  Vector assign from C-style array. 
====operator======
{{{
  bool replay::vector2< type >::operator==(const vector2< type > &operand) const 
}}}
  Vector element wise compare. 
====operator[]====
{{{
  type& replay::vector2< type >::operator[](const index_type i)
}}}
  Index access operator. 
====operator[]====
{{{
  const type& replay::vector2< type >::operator[](const index_type i) const 
}}}
  Index access operator. 
====operator|====
{{{
  type replay::vector2< type >::operator|(const vector2< type > &operand) const 
}}}
  Vector dot product. 
====ptr====
{{{
  const type* replay::vector2< type >::ptr() const 
}}}
  Get a pointer to the internal array. 
====ptr====
{{{
  type* replay::vector2< type >::ptr()
}}}
  Get a pointer to the internal array. 
====set====
{{{
  void replay::vector2< type >::set(const type x, const type y)
}}}
  Set vector from given values. 
====squared====
{{{
  type replay::vector2< type >::squared() const 
}}}
  Vector dot-product square. 
====cast====
{{{
  static vector2< type > replay::vector2< type >::cast(const vector2< x > &from)
}}}
  Element wise static typecast. 