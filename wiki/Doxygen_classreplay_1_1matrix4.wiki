
==replay::matrix4 Reference==

{{{
#include matrix4.hpp
}}}
4x4 float matrix. uses opengl-like column major internal format: 0 4 8 12 1 5 9 13 2 6 10 14 3 7 11 15 
====data====
{{{
  float replay::matrix4::data[16][16]
}}}
  
====matrix4====
{{{
  replay::matrix4::matrix4()
}}}
  Create an uninitialized matrix. 
====matrix4====
{{{
  replay::matrix4::matrix4(const quaternion &rotation)
}}}
  Create a rotational matrix from a quaternion. 
====matrix4====
{{{
  replay::matrix4::matrix4(const quaternion &rotation, const vector3f &offset, float sign)
}}}
  Create a matrix from a rotational part, sign and an offset. 
====matrix4====
{{{
  replay::matrix4::matrix4(const float a11, const float a21, const float a31, const float a41, const float a12, const float a22, const float a32, const float a42, const float a13, const float a23, const float a33, const float a43, const float a14, const float a24, const float a34, const float a44)
}}}
  Create a matrix from the given components. 
====matrix4====
{{{
  replay::matrix4::matrix4(const quaternion &rotation, const vector3f &offset)
}}}
  Create a matrix from a rotational part and an offset. 
====determinant====
{{{
  float replay::matrix4::determinant() const 
}}}
  Compute a determinat. 
====get_column====
{{{
  const replay::vector4f replay::matrix4::get_column(unsigned int i) const 
}}}
  Get a column of the matrix. 
====get_row====
{{{
  const replay::vector4f replay::matrix4::get_row(unsigned int i) const 
}}}
  Get a row in the matrix. 
====inverted_orthogonal====
{{{
  const replay::matrix4 replay::matrix4::inverted_orthogonal() const 
}}}
  Invert the matrix if it is orthogonal. 
====multiply3====
{{{
  const vector4f replay::matrix4::multiply3(const vector3f &rhs) const 
}}}
  Multiply a vector by the matrix, assuming the forth component to be 1. 
====operator()====
{{{
  float replay::matrix4::operator()(unsigned int r, unsigned int c) const 
}}}
  Get matrix elements by their indices. 
====operator()====
{{{
  float& replay::matrix4::operator()(unsigned int r, unsigned int c)
}}}
  Get matrix elements by their indices. 
====operator*====
{{{
  const matrix4 replay::matrix4::operator*(const matrix4 &other) const 
}}}
  Multiply two matrices. 
====operator*====
{{{
  const replay::matrix4 replay::matrix4::operator*(const float rhs) const 
}}}
  Multiply the matrix by a scalar. 
====operator*====
{{{
  const vector3f replay::matrix4::operator*(const vector3f &other) const 
}}}
  Multiply a vector by the matrix, assuming the forth component to be 1 and the last row in the matrix to be [0,0,0,1]. 
====operator*====
{{{
  const vector4f replay::matrix4::operator*(const vector4f &other) const 
}}}
  Multiply a vector by the matrix. 
====operator*=====
{{{
  matrix4 & replay::matrix4::operator*=(const matrix4 &other)
}}}
  Inplace multiply the matrix. Due to the nature of matrix multiplication, this will create a temporary matrix internally. 
====operator*=====
{{{
  matrix4 & replay::matrix4::operator*=(const float rhs)
}}}
  Inplace multiply the matrix by a scalar. 
====operator+====
{{{
  const replay::matrix4 replay::matrix4::operator+(const matrix4 &other) const 
}}}
  Add two matrices component wise. 
====operator+=====
{{{
  replay::matrix4 & replay::matrix4::operator+=(const matrix4 &other)
}}}
  Inplace add two matrices component wise. 
====operator=====
{{{
  replay::matrix4 & replay::matrix4::operator=(const quaternion &rotation)
}}}
  Assign a quaternion. 
====operator[]====
{{{
  float& replay::matrix4::operator[](const index_type i)
}}}
  Index access operator. 
====operator[]====
{{{
  const float& replay::matrix4::operator[](const index_type i) const 
}}}
  Index access operator. 
====ptr====
{{{
  float * replay::matrix4::ptr()
}}}
  Get a pointer to the elements. 
====ptr====
{{{
  const float * replay::matrix4::ptr() const 
}}}
  Get a pointer to the elements. 
====scale====
{{{
  replay::matrix4 & replay::matrix4::scale(const float x, const float y, const float z)
}}}
  Scale the given transformation. 
====scale====
{{{
  replay::matrix4 & replay::matrix4::scale(const vector3f &v)
}}}
  Scale the given transformation. 
====set====
{{{
  replay::matrix4 & replay::matrix4::set(const float a11, const float a21, const float a31, const float a41, const float a12, const float a22, const float a32, const float a42, const float a13, const float a23, const float a33, const float a43, const float a14, const float a24, const float a34, const float a44)
}}}
  Set a matrix from given components. 
====set_column====
{{{
  void replay::matrix4::set_column(unsigned int i, const vector4f &column)
}}}
  Set a column in the matrix. 
====set_identity====
{{{
  replay::matrix4 & replay::matrix4::set_identity()
}}}
  Set an identity matrix. 
====set_rotation====
{{{
  replay::matrix4 & replay::matrix4::set_rotation(const float angle, const vector3f &axis)
}}}
  Set a rotational matrix. 
====set_rotation_x====
{{{
  replay::matrix4 & replay::matrix4::set_rotation_x(const float angle)
}}}
  Set a rotation around the x axis. 
====set_rotation_y====
{{{
  replay::matrix4 & replay::matrix4::set_rotation_y(const float angle)
}}}
  Set a rotation around the y axis. 
====set_rotation_z====
{{{
  replay::matrix4 & replay::matrix4::set_rotation_z(const float angle)
}}}
  Set a rotation around the z axis. 
====set_row====
{{{
  void replay::matrix4::set_row(unsigned int i, const vector4f &row)
}}}
  Set a row in a matrix. 
====set_scale====
{{{
  replay::matrix4 & replay::matrix4::set_scale(const float sx, const float sy, const float sz)
}}}
  Set a scale matrix. 
====set_translation====
{{{
  replay::matrix4 & replay::matrix4::set_translation(const vector3f &translation)
}}}
  Set the translation. 
====swap_column====
{{{
  void replay::matrix4::swap_column(unsigned int i, unsigned int j)
}}}
  Swap two columns. 
====swap_row====
{{{
  void replay::matrix4::swap_row(unsigned int i, unsigned int j)
}}}
  Swap two rows. 
====translate====
{{{
  replay::matrix4 & replay::matrix4::translate(const float x, const float y, const float z)
}}}
  Translate by the given offset. 
====translate====
{{{
  replay::matrix4 & replay::matrix4::translate(const vector3f &rhs)
}}}
  Translate by the given offset. 
====transpose====
{{{
  void replay::matrix4::transpose()
}}}
  Transpose the matrix. 
====multiply====
{{{
  void replay::matrix4::multiply(const matrix4 &a, const matrix4 &b, matrix4 &result)
}}}
  Multiply two matrices. 