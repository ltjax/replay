
==replay::matrix2 Reference==

{{{
#include matrix2.hpp
}}}
2x2 float matrix. 
====data====
{{{
  float replay::matrix2::data[4][4]
}}}
  
====matrix2====
{{{
  replay::matrix2::matrix2()
}}}
  Create a new uninitialized matrix. 
====matrix2====
{{{
  replay::matrix2::matrix2(const float m11, const float m21, const float m12, const float m22)
}}}
  Create a matrix from four values. 
====determinant====
{{{
  float replay::matrix2::determinant() const 
}}}
  Compute the determinant of the matrix. 
====invert====
{{{
  bool replay::matrix2::invert()
}}}
  Invert the matrix. false if the matrix is singular, true otherwise. 
====operator()====
{{{
  const float replay::matrix2::operator()(const unsigned int row, const unsigned int column) const 
}}}
  Get a matrix element by two indices. 
====operator()====
{{{
  float& replay::matrix2::operator()(const unsigned int row, const unsigned int column)
}}}
  Get a matrix element by two indices. 
====operator*====
{{{
  const replay::vector2f replay::matrix2::operator*(const vector2f &v) const 
}}}
  Multiply a vector by this matrix. 
====operator*====
{{{
  const replay::matrix2 replay::matrix2::operator*(const matrix2 &m) const 
}}}
  Multiply two matrices. 
====operator*=====
{{{
  replay::matrix2 & replay::matrix2::operator*=(const matrix2 &m)
}}}
  Multiply-assign a matrix. 
====operator[]====
{{{
  float replay::matrix2::operator[](const unsigned int i) const 
}}}
  Get a matrix element by its column major index. 
====ptr====
{{{
  const float* replay::matrix2::ptr() const 
}}}
  Get a pointer to the data. 
====ptr====
{{{
  float* replay::matrix2::ptr()
}}}
  Get a pointer to the data. 
====set====
{{{
  replay::matrix2 & replay::matrix2::set(const float m11, const float m21, const float m12, const float m22)
}}}
  Set the matrix from four values. 
====set_identity====
{{{
  replay::matrix2 & replay::matrix2::set_identity()
}}}
  Set the matrix to the identity transformation. 
====set_rotation====
{{{
  replay::matrix2 & replay::matrix2::set_rotation(const float angle)
}}}
  Set the matrix to a rotational transformation. 
====set_scale====
{{{
  replay::matrix2 & replay::matrix2::set_scale(const vector2f &scale)
}}}
  Set the matrix to a scale transformation. 
====multiply====
{{{
  replay::matrix2 & replay::matrix2::multiply(const matrix2 &a, const matrix2 &b, matrix2 &result)
}}}
  Multiply two matrices. 
====rotate====
{{{
  static matrix2& replay::matrix2::rotate(matrix2 &m, const float angle)
}}}
  Concaternate the given matrix with a rotational transformation. 
====scale====
{{{
  static matrix2& replay::matrix2::scale(matrix2 &m, const vector2f &scale)
}}}
  Concaternate the given matrix with a scale transformation. 