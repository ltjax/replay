
==replay::pixbuf Reference==

{{{
#include pixbuf.hpp
}}}
pixel based image. 
====byte====
{{{
  typedef unsigned char replay::pixbuf::byte
}}}
  8-bit unsigned int. 
====color_format====
  Color-Format. 
  =====greyscale=====
  greyscale (8-bit). 
  =====rgb=====
  Red,Green,Blue (24-bit). 
  =====rgba=====
  Red,Green,Blue and Alpha (32-bit). 
====shared_pixbuf====
{{{
  typedef boost::shared_ptr<pixbuf> replay::pixbuf::shared_pixbuf
}}}
  
====data====
{{{
  internal* replay::pixbuf::data
}}}
  
====pixbuf::internal====
{{{
  friend class pixbuf::internal
}}}
  
====pixbuf====
{{{
  replay::pixbuf::pixbuf()
}}}
  Create a new invalid pixbuf. 
====replace_data====
{{{
  void replay::pixbuf::replace_data(internal *data)
}}}
  
====~pixbuf====
{{{
  replay::pixbuf::~pixbuf()
}}}
  Free the image data. 
====blit====
{{{
  bool replay::pixbuf::blit(unsigned int dx, unsigned int dy, unsigned int w, unsigned int h, unsigned int sx, unsigned int sy, const pixbuf &source)
}}}
  copy a part of one image to another. dxDestination x-coordinate. dyDestination y-coordinate. wWidth of the part to copy. hHeight of the part to copy. sxSource offset x-coordinate. sySource offset y-coordinate. sourceImage to source the data from. 
====blit====
{{{
  bool replay::pixbuf::blit(unsigned int dx, unsigned int dy, const pixbuf &source)
}}}
  Simplified blit. Copies the whole source image to the given coordinates. dxDestination x-coordinate. dyDestination y-coordinate. sourceImage to source the data from. 
====convert_to_rgba====
{{{
  void replay::pixbuf::convert_to_rgba()
}}}
  Convert this image to 4-channel RGBA format. 
====fill====
{{{
  void replay::pixbuf::fill(const byte r, const byte g, const byte b, const byte a=255)
}}}
  Fill the whole image with the given pixel value. 
====fill====
{{{
  void replay::pixbuf::fill(const byte grey)
}}}
  Fill the whole image with the given greyscale value. 
====flip====
{{{
  void replay::pixbuf::flip()
}}}
  Flip the image vertically. 
====get_channels====
{{{
  unsigned int replay::pixbuf::get_channels() const 
}}}
  Get the image number of channels. 
====get_data====
{{{
  const unsigned char * replay::pixbuf::get_data() const 
}}}
  Get a constant pointer to the pixel data. 
====get_data====
{{{
  unsigned char * replay::pixbuf::get_data()
}}}
  Get a pointer to the pixel data. 
====get_height====
{{{
  unsigned int replay::pixbuf::get_height() const 
}}}
  Get the image height. 
====get_pixel====
{{{
  unsigned char * replay::pixbuf::get_pixel(unsigned int x, unsigned int y)
}}}
  Get a pointer to a specific pixel. xColumn of the pixel to get. yColumn of the pixel to get. 
====get_pixel====
{{{
  const unsigned char * replay::pixbuf::get_pixel(unsigned int x, unsigned int y) const 
}}}
  Get a pointer to a specific pixel. xColumn of the pixel to get. yColumn of the pixel to get. 
====get_pixel====
{{{
  const unsigned char * replay::pixbuf::get_pixel(unsigned int i) const 
}}}
  Get a pointer to a specific pixel. iIndex of the pixel to get. 
====get_sub_image====
{{{
  boost::shared_ptr< replay::pixbuf > replay::pixbuf::get_sub_image(unsigned int x, unsigned int y, unsigned int w, unsigned int h)
}}}
  return a part of this image. xSource offset x-coordinate. ySource offset y-coordinate. wWidth of the part to copy. hHeight of the part to copy. 
====get_width====
{{{
  unsigned int replay::pixbuf::get_width() const 
}}}
  Get the image width. 
====set_pixel====
{{{
  void replay::pixbuf::set_pixel(const unsigned int x, const unsigned int y, const byte grey)
}}}
  Set the pixel. 
====set_pixel====
{{{
  void replay::pixbuf::set_pixel(const unsigned int x, const unsigned int y, const byte r, const byte g, const byte b, const byte a)
}}}
  Set the pixel. 
====create====
{{{
  boost::shared_ptr< replay::pixbuf > replay::pixbuf::create(unsigned int x, unsigned int y, color_format format)
}}}
  Create an image with the given parameters. 