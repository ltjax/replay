
==replay::vector3 Reference==

{{{
#include vector3.hpp
}}}
3-dimensional vector. 
====data====
{{{
  type replay::vector3< type >::data[3][3]
}}}
  the actual data. 
====vector3====
{{{
  replay::vector3< type >::vector3()
}}}
  Create a new vector. The default constructor will initialise all values as zero. 
====vector3====
{{{
  replay::vector3< type >::vector3(const float value)
}}}
  Create a vector with all elements the same value. 
====vector3====
{{{
  replay::vector3< type >::vector3(const type *data)
}}}
  Convert an array into a vector. arrayArray to copy the values from. The values will be copied from the first three elements. 
====vector3====
{{{
  replay::vector3< type >::vector3(const type &x, const type &y, const type &z)
}}}
  Create a new vector from seperate values. xThe first component. yThe second component. zThe third component. 
====clear====
{{{
  void replay::vector3< type >::clear()
}}}
  Clear. Reset all values to zero. 
====negate====
{{{
  void replay::vector3< type >::negate()
}}}
  Negate. Negate each component of this vector. 
====operator!=====
{{{
  bool replay::vector3< type >::operator!=(const vector3< type > &operand) const 
}}}
  Test for unequality. 
====operator*====
{{{
  replay::vector3< type > replay::vector3< type >::operator*(const vector3< type > &operand) const 
}}}
  Cross product. Also referred to as vector-product. 
====operator*====
{{{
  replay::vector3< type > replay::vector3< type >::operator*(const type &operand) const 
}}}
  Scalar product. 
====operator*=====
{{{
  replay::vector3< type > & replay::vector3< type >::operator*=(const type &operand)
}}}
  Scalar multiplication. 
====operator+====
{{{
  replay::vector3< type > replay::vector3< type >::operator+(const vector3< type > &operand) const 
}}}
  Addition. 
====operator+=====
{{{
  replay::vector3< type > & replay::vector3< type >::operator+=(const vector3< type > &operand)
}}}
  Addition. 
====operator-====
{{{
  replay::vector3< type > replay::vector3< type >::operator-() const 
}}}
  Negation. 
====operator-====
{{{
  replay::vector3< type > replay::vector3< type >::operator-(const vector3< type > &operand) const 
}}}
  Subtraction. 
====operator-=====
{{{
  replay::vector3< type > & replay::vector3< type >::operator-=(const vector3< type > &operand)
}}}
  Subtraction. 
====operator/====
{{{
  replay::vector3< type > replay::vector3< type >::operator/(const type &operand) const 
}}}
  Scalar division. 
====operator/=====
{{{
  replay::vector3< type > & replay::vector3< type >::operator/=(const type &operand)
}}}
  Scalar division. 
====operator=====
{{{
  replay::vector3< type > & replay::vector3< type >::operator=(const type *array)
}}}
  Assign an array. arrayArray to copy the values from. The values will be copied from the first three elements. 
====operator======
{{{
  bool replay::vector3< type >::operator==(const vector3< type > &operand) const 
}}}
  Test for equality. 
====operator[]====
{{{
  type& replay::vector3< type >::operator[](const index_type i)
}}}
  Index access operator. 
====operator[]====
{{{
  const type& replay::vector3< type >::operator[](const index_type i) const 
}}}
  Index access operator. 
====operator|====
{{{
  type replay::vector3< type >::operator|(const vector3< type > &operand) const 
}}}
  Dot product. 
====ptr====
{{{
  const type* replay::vector3< type >::ptr() const 
}}}
  Get a pointer to the internal array. 
====ptr====
{{{
  type* replay::vector3< type >::ptr()
}}}
  Get a pointer to the internal array. 
====set====
{{{
  replay::vector3< type > & replay::vector3< type >::set(const type &v)
}}}
  Set all components. vValue to set the vector to. 
====set====
{{{
  replay::vector3< type > & replay::vector3< type >::set(const type &x, const type &y, const type &z)
}}}
  Set this objects components. xThe first component. yThe second component. zThe third component. 
====set====
{{{
  vector3< type >& replay::vector3< type >::set(const x *array)
}}}
  Set this objects components using an array of another type. arrayArray to copy the values from. The values will be copied from the first n elements. 
====squared====
{{{
  type replay::vector3< type >::squared() const 
}}}
  Square. Square this vector using the dot product. 
====sum====
{{{
  type replay::vector3< type >::sum() const 
}}}
  Sum. Return a sum of all elements. 
====cast====
{{{
  static vector3< type > replay::vector3< type >::cast(const vector3< x > &from)
}}}
  static element wise type cast. 
====comp_product====
{{{
  static vector3< type > replay::vector3< type >::comp_product(const vector3< type > &a, const vector3< type > &b)
}}}
  component wise product. 
====cross_product====
{{{
  static vector3< type > replay::vector3< type >::cross_product(const vector3< type > &a, const vector3< type > &b)
}}}
  vector cross product. 
====dot_product====
{{{
  static float replay::vector3< type >::dot_product(const vector3< type > &a, const vector3< type > &b)
}}}
  vector dot product. 