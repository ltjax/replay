
==replay::box_packer Reference==

{{{
#include box_packer.hpp
}}}
2d box packer. This uses a first fit packing algorithm. 
====padding====
{{{
  int replay::box_packer::padding
}}}
  
====root====
{{{
  node* replay::box_packer::root
}}}
  
====box_packer====
{{{
  replay::box_packer::box_packer(int width, int height, int padding=0)
}}}
  Create a new box packer. widththe width of the area to pack on heightthe height of the area to pack on paddingspace to be left between packed items 
====~box_packer====
{{{
  replay::box_packer::~box_packer()
}}}
  dtor. 
====get_height====
{{{
  int replay::box_packer::get_height() const 
}}}
  get the height (without padding). 
====get_padding====
{{{
  int replay::box_packer::get_padding() const 
}}}
  get the padding between boxes. 
====get_width====
{{{
  int replay::box_packer::get_width() const 
}}}
  get the width (without padding). 
====pack====
{{{
  const replay::box< int > & replay::box_packer::pack(int width, int height)
}}}
  Pack an item of the given size. If there is no more space left to pack the given item, the function will throw an box_packer::pack_overflow exception. widthThe width of the item to pack heightThe height of the item to pack 
====pack====
{{{
  bool replay::box_packer::pack(int width, int height, box< int > *rect)
}}}
  Pack an item of the given size. If there is no more space left to pack the given item, the function will return false. widthThe width of the item to pack. heightThe height of the item to pack. rectThe result rect where the item was placed. 