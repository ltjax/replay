
==replay::fixed_table Reference==

{{{
#include table.hpp
}}}
A fixed size two dimensional array. This is the fixed size sibling of table. 
====size_type====
{{{
  typedef unsigned int replay::fixed_table< T, w, h >::size_type
}}}
  
====data====
{{{
  T replay::fixed_table< T, w, h >::data[w *h][w *h]
}}}
  
====fixed_table====
{{{
  replay::fixed_table< T, w, h >::fixed_table()
}}}
  Initialize all elements with their default constructor. 
====fixed_table====
{{{
  replay::fixed_table< T, w, h >::fixed_table(T v)
}}}
  Copy the given value to all elements. 
====fill====
{{{
  void replay::fixed_table< T, w, h >::fill(T v)
}}}
  Fill the table with the given value. 
====get====
{{{
  T& replay::fixed_table< T, w, h >::get(const size_type i)
}}}
  Get an element via its linear offset. 
====get====
{{{
  const T& replay::fixed_table< T, w, h >::get(const size_type i) const 
}}}
  Get an element via its linear offset. 
====get_height====
{{{
  size_type replay::fixed_table< T, w, h >::get_height() const 
}}}
  Get height. 
====get_width====
{{{
  size_type replay::fixed_table< T, w, h >::get_width() const 
}}}
  Get width. 
====operator()====
{{{
  T& replay::fixed_table< T, w, h >::operator()(unsigned int x, unsigned int y)
}}}
  Access the array elements using two indices. 
====operator()====
{{{
  const T& replay::fixed_table< T, w, h >::operator()(unsigned int x, unsigned int y) const 
}}}
  Access the array elements using two indices. 
====operator[]====
{{{
  const T* replay::fixed_table< T, w, h >::operator[](unsigned int x) const 
}}}
  Access the array elements using the array offset operator. get
====operator[]====
{{{
  T* replay::fixed_table< T, w, h >::operator[](unsigned int x)
}}}
  Access the array elements using the array offset operator. get
====ptr====
{{{
  T* replay::fixed_table< T, w, h >::ptr()
}}}
  Return the raw buffer. 
====ptr====
{{{
  const T* replay::fixed_table< T, w, h >::ptr() const 
}}}
  Return the raw buffer. 