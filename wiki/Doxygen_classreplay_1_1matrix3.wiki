
==replay::matrix3 Reference==

{{{
#include matrix3.hpp
}}}
3x3 float matrix. 
====data====
{{{
  float replay::matrix3::data[9][9]
}}}
  
====matrix3====
{{{
  replay::matrix3::matrix3()
}}}
  Create an uninitialized matrix. Contents at this point are undefined! 
====matrix3====
{{{
  replay::matrix3::matrix3(const float m11, const float m21, const float m31, const float m12, const float m22, const float m32, const float m13, const float m23, const float m33)
}}}
  Create a matrix from the individual components. 
====matrix3====
{{{
  replay::matrix3::matrix3(const quaternion &q)
}}}
  Assign a rotational quaternion. 
====matrix3====
{{{
  replay::matrix3::matrix3(const vector3f &a, const vector3f &b, const vector3f &c)
}}}
  Column wise init. 
====add_scaled_row====
{{{
  void replay::matrix3::add_scaled_row(unsigned int src, float x, unsigned int dst)
}}}
  Add a scaled row. 
====determinant====
{{{
  float replay::matrix3::determinant() const 
}}}
  Compute the determinat. 
====get_column====
{{{
  const vector3f replay::matrix3::get_column(unsigned int index) const 
}}}
  Get a matrix column. 
====get_column====
{{{
  const vector3f replay::matrix3::get_column() const 
}}}
  Get a column via template parameter. 
====get_row====
{{{
  const vector3f replay::matrix3::get_row() const 
}}}
  get the first row. 
====get_row====
{{{
  const vector3f replay::matrix3::get_row(unsigned int index) const 
}}}
  Get a matrix row. 
====invert====
{{{
  replay::matrix3 & replay::matrix3::invert()
}}}
  Invert this matrix. 
====inverted====
{{{
  const replay::matrix3 replay::matrix3::inverted() const 
}}}
  Get the inverted matrix. 
====operator()====
{{{
  const float replay::matrix3::operator()(X r, Y c) const 
}}}
  Get matrix elements by their indices. 
====operator()====
{{{
  float& replay::matrix3::operator()(X r, Y c)
}}}
  Get matrix elements by their indices. 
====operator()====
{{{
  float& replay::matrix3::operator()(unsigned int r, unsigned int c)
}}}
  Get matrix elements by their indices. 
====operator()====
{{{
  float replay::matrix3::operator()(unsigned int r, unsigned int c) const 
}}}
  Get matrix elements by their indices. 
====operator*====
{{{
  const replay::matrix3 replay::matrix3::operator*(const matrix3 &m) const 
}}}
  Multiply two matrices. 
====operator*====
{{{
  const matrix3 replay::matrix3::operator*(const float f) const 
}}}
  Multiply a matrix by a scalar. 
====operator*====
{{{
  const replay::vector3f replay::matrix3::operator*(const vector3f &v) const 
}}}
  Multiply a vector by a matrix. 
====operator*=====
{{{
  replay::matrix3 & replay::matrix3::operator*=(const float f)
}}}
  Inplace multiply a matrix by a scalar. 
====operator*=====
{{{
  replay::matrix3 & replay::matrix3::operator*=(const matrix3 &m)
}}}
  Inplace multiply two matrices. This creates another temporary matrix internally. 
====operator+====
{{{
  const matrix3 replay::matrix3::operator+(const matrix3 &m) const 
}}}
  Add two matrices. 
====operator+=====
{{{
  replay::matrix3 & replay::matrix3::operator+=(const matrix3 &m)
}}}
  Inplace add two matrices. 
====operator=====
{{{
  replay::matrix3 & replay::matrix3::operator=(const quaternion &q)
}}}
  Assign a quaternion to this matrix. 
====operator[]====
{{{
  float& replay::matrix3::operator[](const index_type i)
}}}
  Get matrix elements by their column-major index. 
====operator[]====
{{{
  float replay::matrix3::operator[](const index_type i) const 
}}}
  Get matrix elements by their column-major index. 
====operator|====
{{{
  const replay::vector3f replay::matrix3::operator|(const vector3f &v) const 
}}}
  transposed multiplication. transposed( operand ) * this 
====ptr====
{{{
  float* replay::matrix3::ptr()
}}}
  Get a pointer to the data. 
====ptr====
{{{
  const float* replay::matrix3::ptr() const 
}}}
  Get a pointer to the data. 
====scale_row====
{{{
  void replay::matrix3::scale_row(unsigned int i, float x)
}}}
  Scale the given row. 
====set====
{{{
  void replay::matrix3::set(const vector3f &a, const vector3f &b, const vector3f &c)
}}}
  Column wise set. 
====set====
{{{
  replay::matrix3 & replay::matrix3::set(float m11, float m21, float m31, float m12, float m22, float m32, float m13, float m23, float m33)
}}}
  Set the matrix by it's individual components. 
====set_identity====
{{{
  void replay::matrix3::set_identity()
}}}
  Set the identity matrix. 
====set_rotation====
{{{
  void replay::matrix3::set_rotation(const float angle, const vector3f &axis)
}}}
  Set rotational matrix. 
====set_rotation_x====
{{{
  replay::matrix3 & replay::matrix3::set_rotation_x(const float angle)
}}}
  Set a rotation around the x axis. 
====set_rotation_y====
{{{
  replay::matrix3 & replay::matrix3::set_rotation_y(const float angle)
}}}
  Set a rotation around the y axis. 
====set_rotation_z====
{{{
  replay::matrix3 & replay::matrix3::set_rotation_z(const float angle)
}}}
  Set a rotation around the z axis. 
====set_row====
{{{
  void replay::matrix3::set_row(unsigned int index, const vector3f &v)
}}}
  Set a row in the matrix. 
====set_scale====
{{{
  void replay::matrix3::set_scale(const float x, const float y, const float z)
}}}
  Set a scale matrix. 
====set_scale====
{{{
  void replay::matrix3::set_scale(const vector3f &v)
}}}
  Set a scale matrix. 
====swap_rows====
{{{
  void replay::matrix3::swap_rows(unsigned int a, unsigned int b)
}}}
  Swap matrix rows. 
====transpose====
{{{
  replay::matrix3 & replay::matrix3::transpose()
}}}
  Transpose the matrix. 
====transposed====
{{{
  const replay::matrix3 replay::matrix3::transposed() const 
}}}
  Get the transposed matrix. 
====multiply====
{{{
  replay::matrix3 & replay::matrix3::multiply(const matrix3 &a, const matrix3 &b, matrix3 &result)
}}}
  Multiply two matrices. Uses 27 mults and 18 adds. 
====multiply====
{{{
  replay::vector3f & replay::matrix3::multiply(const matrix3 &a, const vector3f &v, vector3f &result)
}}}
  Multiply a vector by a matrix. 9 mults, 6 adds 
====rotate====
{{{
  void replay::matrix3::rotate(matrix3 &m, const float angle, const vector3f &v)
}}}
  Concaternate this matrix with a rotational matrix. 
====scale====
{{{
  void replay::matrix3::scale(matrix3 &m, const vector3f &v)
}}}
  Concaternate this matrix with a scale matrix. 
====scale====
{{{
  void replay::matrix3::scale(matrix3 &m, const float x, const float y, const float z)
}}}
  Concaternate this matrix with a scale matrix. 