
==replay::table Reference==

{{{
#include table.hpp
}}}
A dynamicly sized two dimensional array class. Tables of size $0x0$ are called invalid - they do not maintain any additional memory and no elements can be accessed. Consider using fixed_table instead when the size is known at compile time. 
====object_type====
{{{
  typedef T replay::table< T >::object_type
}}}
  
====self_type====
{{{
  typedef table< T > replay::table< T >::self_type
}}}
  
====size_type====
{{{
  typedef unsigned int replay::table< T >::size_type
}}}
  
====const_iterator====
{{{
  typedef const object_type* replay::table< T >::const_iterator
}}}
  
====iterator====
{{{
  typedef object_type* replay::table< T >::iterator
}}}
  
====buffer====
{{{
  object_type* replay::table< T >::buffer
}}}
  
====height====
{{{
  size_type replay::table< T >::height
}}}
  
====width====
{{{
  size_type replay::table< T >::width
}}}
  
====table====
{{{
  replay::table< T >::table(const size_type width, const size_type height)
}}}
  Construct a table of given width and height. 
====table====
{{{
  replay::table< T >::table()
}}}
  Default constructor. Creates an invalid table. 
====table====
{{{
  replay::table< T >::table(const table< object_type > &other)
}}}
  Copy constructor. Will create a table of equal size and copy all elements over. 
====table====
{{{
  replay::table< T >::table(const size_type width, const size_type height, const object_type &value)
}}}
  Construct a table of given width and height and fill it with the given value. 
====~table====
{{{
  replay::table< T >::~table()
}}}
  Destructor. Will clean up all memory automatically. 
====begin====
{{{
  const_iterator replay::table< T >::begin() const 
}}}
  Get an iterator to the beginning of the table. 
====begin====
{{{
  iterator replay::table< T >::begin()
}}}
  Get an iterator to the beginning of the table. 
====clear====
{{{
  void replay::table< T >::clear()
}}}
  Invalidate the table and free the memory. 
====end====
{{{
  iterator replay::table< T >::end()
}}}
  Get an iterator the end of the table. 
====end====
{{{
  const_iterator replay::table< T >::end() const 
}}}
  Get an iterator the end of the table. 
====fill====
{{{
  void replay::table< T >::fill(const object_type &value)
}}}
  Fill the table with the given value. 
====get====
{{{
  object_type& replay::table< T >::get(const size_type i)
}}}
  Get an element via its linear offset. get_index
====get====
{{{
  const object_type& replay::table< T >::get(const size_type i) const 
}}}
  Get an element via its linear offset. get_index
====get_height====
{{{
  size_type replay::table< T >::get_height() const 
}}}
  Get the height of the table, i.e. the number of rows. 
====get_index====
{{{
  size_type replay::table< T >::get_index(const size_type x, const size_type y) const 
}}}
  Compute the linear memory offset of an element. 
====get_width====
{{{
  size_type replay::table< T >::get_width() const 
}}}
  Get the width of the table, i.e. the number of columns. 
====is_valid====
{{{
  bool replay::table< T >::is_valid() const 
}}}
  Checks whether the matrix is valid. 
====operator()====
{{{
  const object_type& replay::table< T >::operator()(const size_type x, const size_type y) const 
}}}
  Access the matrix. xThe column in the table. yThe row in the table. A const reference to an element. The order of the parameters is reversed from typical mathematical notation. 
====operator()====
{{{
  object_type& replay::table< T >::operator()(const size_type x, const size_type y)
}}}
  Access the table. xThe column in the table. yThe row in the table. A mutable reference to an element. The order of the parameters is reversed from typical mathematical notation. 
====operator=====
{{{
  self_type& replay::table< T >::operator=(const self_type &other)
}}}
  Assign a table and copy the contained data. 
====ptr====
{{{
  object_type* replay::table< T >::ptr()
}}}
  Get a pointer to the raw buffer. A mutable pointer to the internal buffer. The internal memory layout is a continguous and row-major. 
====ptr====
{{{
  const object_type* replay::table< T >::ptr() const 
}}}
  Get a pointer to the raw buffer. A const pointer to the internal buffer. The internal memory layout is a continguous and row-major. 
====resize====
{{{
  void replay::table< T >::resize(const size_type width, const size_type height)
}}}
  Resize the table and invalidate all contents. 
====resize====
{{{
  void replay::table< T >::resize(const size_type width, const size_type height, const object_type &value)
}}}
  Resize the table and write the value to all elements. 
====swap====
{{{
  void replay::table< T >::swap(self_type &rhs)
}}}
  Swap the contents of this and another table. This is a constant-time operation. 
====swap====
{{{
  static void replay::table< T >::swap(self_type &a, self_type &b)
}}}
  Swap the contents of two tables. This is a constant-time operation. 